 <Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <Description>Runtime expressions parser and evaluator (formulas, conditions, method calls, properties/indexers etc). Builds LINQ expression tree and compiles it to lambda delegate with full support of dynamically typed variables.
	
Source code and examples: https://github.com/nreco/lambdaparser	
</Description>
    <Title>Dynamic expressions evaluator</Title>
    <Copyright>Copyright (c) 2013-2025 Vitalii Fedorchenko and contributors</Copyright>
    <AssemblyTitle>NReco.LambdaParser</AssemblyTitle>
    <VersionPrefix>1.2.2</VersionPrefix>
    <Authors>Vitalii Fedorchenko</Authors>
    <TargetFrameworks>netstandard2.0;netstandard1.3;net45</TargetFrameworks>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <AssemblyName>NReco.LambdaParser</AssemblyName>
    <AssemblyOriginatorKeyFile>NReco.LambdaParser.snk</AssemblyOriginatorKeyFile>
    <SignAssembly>True</SignAssembly>
    <PackageId>NReco.LambdaParser</PackageId>
    <PackageTags>LambdaParser;Formula;Parser;Math;Expression;Evaluator;Eval;LINQ-dynamic;netstandard;netcore;net45;</PackageTags>
	<PackageReleaseNotes>
v.1.2.2 changes:
- Json-like syntax for arrays/dictionaries #56 (+ allow to create an empty array / an empty dictionary)
- Incorrect parse of the method argument when it starts with delimiter #57
	
v.1.1.3 changes:
- fixed version mismatch #52

v.1.1.2 changes:
- use concurrent dictionary to replace lock #51	
	
v.1.1.1 changes:
- added support for optional parameters in method calls #44 (via OptionsParamsInvokeMethod impl)	
- added support for 'params' arguments in method calls #45 (via OptionsParamsInvokeMethod impl)
	
v.1.1.0 changes:
- variables in expressions #42 (to enable use LambdaParser.AllowVars)	
- Sequence of ternary operators #43
	
v.1.0.12 changes:
- fixed an issue when comparison result is used as an argument in a method call #30

v.1.0.11 changes:
- removed legacy Portable targets that cause build problems in some environments
	
v.1.0.10 changes:
- fixed issue with 'Object must implement IConvertible' (occurs when delegate argument doesn't implement IConvertible, even if conversion is not needed)
	
v.1.0.9 changes:
- defined +/- operations for datetime/timespan types #17
- added ILambdaValue for accessing real values in Expression produced by LamdbaParser #16
- added option to allow single equal sign '=' for comparison #13
- added netstandard2.0 build #15
	
v.1.0.8 changes:
- fixed parse error of calls chain like delegate().method1().method2()
	
v.1.0.7 changes:
- fixed evaluation of and/or conditions (exceptions like 'AndAlso / OrElse is not defined')

v.1.0.6 changes:
- introduced IValueComparer interface for custom values comparison (https://github.com/nreco/lambdaparser/issues/10)
- default ValueComparer implementation with options: NullComparison (MinValue, Sql), SuppressErrors
- starting from this version expression cache is instance specific (was global) because calculation result may depend on IValueComparer implementation	
</PackageReleaseNotes>	
    <PackageIconUrl>https://www.nrecosite.com/img/nreco-logo-200.png</PackageIconUrl>
    <PackageProjectUrl>https://github.com/nreco/lambdaparser</PackageProjectUrl>
    <PackageLicenseUrl>https://raw.githubusercontent.com/nreco/lambdaparser/master/LICENSE</PackageLicenseUrl>
    <RepositoryUrl>https://github.com/nreco/lambdaparser</RepositoryUrl>
    <RepositoryType>git</RepositoryType>		
    <NetStandardImplicitPackageVersion Condition=" '$(TargetFramework)' == 'netstandard1.3' ">1.6.0</NetStandardImplicitPackageVersion>
    <GenerateAssemblyTitleAttribute>false</GenerateAssemblyTitleAttribute>
    <GenerateAssemblyDescriptionAttribute>false</GenerateAssemblyDescriptionAttribute>
    <GenerateAssemblyConfigurationAttribute>false</GenerateAssemblyConfigurationAttribute>
    <GenerateAssemblyCompanyAttribute>false</GenerateAssemblyCompanyAttribute>
    <GenerateAssemblyProductAttribute>false</GenerateAssemblyProductAttribute>
    <GenerateAssemblyCopyrightAttribute>false</GenerateAssemblyCopyrightAttribute>
    <GenerateNeutralResourcesLanguageAttribute>false</GenerateNeutralResourcesLanguageAttribute>
    <GenerateAssemblyVersionAttribute>false</GenerateAssemblyVersionAttribute>
    <GenerateAssemblyFileVersionAttribute>false</GenerateAssemblyFileVersionAttribute>
	
  </PropertyGroup>

  <ItemGroup Condition=" '$(TargetFramework)' == 'netstandard1.3' ">
    <PackageReference Include="System.Reflection.TypeExtensions" Version="4.1.0" />
  </ItemGroup>
  
</Project>
